; compiler-libs has unstable API, ensure only one module uses it to simplify
; maintenance

(executable
 (public_name lintcstubs_genmain)
 (modules lintcstubs_genmain)
 (libraries lintcstubs-arity.primitives_of_cmt shapes_of_types)
 (package lintcstubs-gen))

(cram
 (deps %{bin:lintcstubs_genmain})
 (package lintcstubs-gen))

(rule
 (target genmain_test.model.c)
 (deps
  (:genwrap_c ../genwrap/genwrap_test.model.c)
  (:cmt
   (glob_files %{ocaml_where}/*.cmt))
  (:linter %{bin:lintcstubs_genmain}))
 (action
  (with-stdout-to
   %{target}
   (progn
    (cat %{genwrap_c})
    (run %{linter} %{cmt})))))

; run both header generators: good way to test that they agree
; on the bytecode prototypes!

(rule
 (deps
  (:gen1 %{bin:lintcstubs_arity})
  (:gen2 %{bin:lintcstubs_arity_cmt})
  (:cmt_files
   (glob_files %{ocaml_where}/*.cmt))
  (:mlfiles
   (glob_files %{ocaml_where}/*.ml)))
 (action
  (with-stdout-to
   primitives.h
   (progn
    (run %{gen1} %{mlfiles})
    (run %{gen2} %{cmt_files})))))

; check that the model compiles with usual compiler

(library
 (package lintcstubs-gen)
 (name genmain_test)
 (modules)
 (foreign_stubs
  (language c)
  (flags
   (:standard -Werror-implicit-function-declaration -Wall))
  (names genmain_test.model)
  (include_dirs ../model/include)))

(cram
 (deps
  %{bin:lintcstubs_genmain}
  %{bin:lintcstubs_genwrap}
  %{bin:lintcstubs_arity}
  %{bin:lintcstubs_arity_cmt}
  ../model/include/goblint.h)
 (package lintcstubs-gen))
